local Vector2 = require('geometry.vector2')

--- Namespace for Xetrov-specific functionality and constants.
local Xetrov = { DELTA = 1e-5, THRESHOLD = 0.025 }

-- Returns the potential generated by a xetrov perturbation.
function Xetrov.perturbation(space, point, source, align, range, gx, hx, offset)
    -- Determine the repulsor direction of potential.
    local repulsor = point - (source + space:offset(point, source))

    -- Return maximum potential if source and point are coincident.
    local distance = repulsor:len() - (offset or 0)
    if distance < Xetrov.DELTA then return -align:unit() * gx(0) end

    -- Return nil if the point is so distant that no potential exists.
    if distance > range then return nil end
    local ratio = distance / range

    -- Return nil if the magnitude of potential at 'point' is below THRESHOLD.
    local gd = gx(ratio)
    if gd < Xetrov.THRESHOLD then return nil end

    -- Determine the tangential direction of potential.
    repulsor = repulsor / distance
    local tangent = repulsor:perp()
    if tangent:dot(align) <= 0 then tangent = -tangent end

    -- Return the combination of repulsor and tangent potentials.
    local hd = hx(ratio)
    local zd = math.sqrt( (1 - hd) * (1 - hd) + hd * hd )
    local rd = gd * ((1 - hd) / zd)
    local td = gd * (hd / zd)
    return repulsor * rd + tangent * td
end

-- Accumulates vector potentials using magnitude-based priority allocation.
function Xetrov.field(potentials)
    table.sort(potentials, function (u, v) return u:len() > v:len() end)

    local total = Vector2()
    local resource = 1

    for _, potential in ipairs(potentials) do
        local magnitude = potential:len()
        if magnitude > resource then
            return total + potential * (resource / magnitude)
        end
        total = total + potential
        resource = resource - magnitude
    end

    return total
end

return Xetrov
