local Vector2 = require('geometry.vector2')

--- Namespace for GAX-specific functionality and constants.
local GAX = {
    DELTA = 1e-5,
    PTL_THRESHOLD = 0.025
}

--- Returns potential in a local coordinate system.
function GAX.potential(gd, hd)
    local zd = math.sqrt( (1 - hd) * (1 - hd) + hd * hd )

    local rd = gd * ((1 - hd) / zd)
    local td = gd * (hd / zd)

    return Vector2(rd, td)
end

-- Returns the potential generated by a perturbation.
function GAX.perturbation(point, obstacle, align, max_dist, gx, hx, offset)
    offset = offset or 0

    -- Determine repulsor axis.
    local source = obstacle:source(point)
    local repulsor = point - source
    local distance = repulsor:len() - offset

    -- Return maximum potential if 'source' and 'point' are coincident.
    if distance < GAX.DELTA then
        return -align:unit() * gx(0)
    end

    -- Return nil if the distance between the 'source' and 'point' is so great
    -- that no potential exists at 'point'.
    if distance > max_dist then
        return nil
    end
    local ratio = distance / max_dist

    -- Return nil if the magnitude of potential at 'point' is below the minimum.
    local gd = gx(ratio)
    if gd < GAX.PTL_THRESHOLD then
        return nil
    end

    -- Evaluate potential.
    local hd = hx(ratio)
    local components = GAX.potential(gd, hd)

    -- Determine tangential direction of potential.
    repulsor = repulsor / distance
    local tangent = repulsor:perp()
    if tangent:dot(align) <= 0 then
        tangent = -tangent
    end

    -- Translate from repulsor-tangent coordinates to world coordinates.
    return repulsor * components.x + tangent * components.y
end

-- Accumulates potentials using the priority cap method.
function GAX.priority_cap(potentials, limit)
    local total_potential = Vector2()

    for _, potential in ipairs(potentials) do
        local magnitude = potential:len()
        if magnitude > limit then
            return total_potential + potential * (limit / magnitude)
        end

        total_potential = total_potential + potential
        limit = limit - magnitude
    end

    return total_potential
end

return GAX
